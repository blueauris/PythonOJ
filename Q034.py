#!python2
#coding: utf-8

##密码生成
"""
生活在当代社会，我们要记住很多密码，银行卡，qq，人人，微博，邮箱等等。小P经过一番思索之后，发明了下面这种生成密码方法：
给定两个正整数a和b, 利用a / b我们会到的一个长度无限的小数(若a / b不是无限小数，
比如1/2=0.5,我们认为0.5是0.5000000...，同样将其看做无限长的小数），小P将该小数点后第x位到第y位的数字
当做密码，这样，无论密码有多长，小P只要记住a,b,x,y四个数字就可以了，牢记密码再也不是那么困难的事情了。
现在告诉你a,b,x,y（0 < a,b <= 20132013, 0 < x <= y < 100000000000),请你输出密码。
例如：a = 1, b = 2, x = 1, y = 4, 则 a / b = 0.5000000..., 输出小数点后第1到4位数字，即5000
"""

"""
算法一：模拟除法，当x y值过大，会超时

算法二：分数反化简
原理：
两个整数相除，会有两种情况：一种有限小数，另一种无限小数。无限小数有纯循环小数和混循环小数两种。
将除法改写为分数形式，商的分数形式与小数形式有如下关系：
如果除数不含除2、5外的质因数，则商为有限小数，原分数可反化简为 分母为10^N， 分子即为小数点之后的部分，高位补零
如果除数中只含有2与5以外的质因数，则商为纯循环小数，原分数可反化简为 分母为10^N-1 形如 99999，分子即为循环节，9的个数等于循环节的位数
如果除数中既含有质因数2或5，又含有2与5以外的质因数，则商为混循环小数，原分数可反化简为 分母为 (10^N-1)*(10^M)，形如 999900，其中9的个数等于循环节的位数，0的个数等于不循环部分的位数，分子是由小数点后面第一个数字到第一个循环节的末位数字所组成的数，减去不循环部分数字所组成的数所得的差。

思路：寻找到某个系数，使分数形式反化简后，分母成为上述三种形式之一。此时分子再做处理即可得循环节。
算法步骤：
1.分解原除数，计算其中的因数2、5的个数，以及其余因数的积。以此判定小数的类型。
2.由因数2、5的个数，求通分后分母中末尾零的个数
3.由其余因数的积，找出通分分母中9的个数
4.分情况处理分子，求得循环节或有限位小数，生成用于截取的数串素材
5.按题设，截取数串，输出
"""